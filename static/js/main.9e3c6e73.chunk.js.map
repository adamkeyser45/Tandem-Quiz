{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/QuizBody/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","style","backgroundColor","className","Footer","href","QuizBody","questionsArray","require","useState","gameOff","setGameOff","tenQuestions","setTenQuestions","currentQuestion","setCurrentQuestion","score","setScore","btnClass","setBtnClass","showCorrect","setShowCorrect","resetQuiz","id","onClick","chosen","length","num","Math","floor","random","includes","push","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","data-target","tabIndex","role","aria-hidden","data-dismiss","aria-label","question","choices","map","choice","isCorrect","setTimeout","nextQuestion","answer","correct","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e3c6e73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={{backgroundColor: '#fff4e6'}}>\r\n            <nav className='navbar justify-content-center'>\r\n                    <h1 className='h2 m-2 '><i className=\"fas fa-user-graduate\"></i> The Trivia Quiz!</h1>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer fixed-bottom\">\r\n            <div className=\"d-flex justify-content-center\">\r\n                <a className=\"btn btn-outline-dark btn-social mx-1\" \r\n                    href=\"https://www.facebook.com/adam.keyser\">\r\n                        <i className=\"fab fa-fw fa-facebook-f fa-lg\"></i></a>\r\n                <a className=\"btn btn-outline-dark btn-social mx-1\" \r\n                    href=\"https://github.com/adamkeyser45\">\r\n                        <i className=\"fab fa-fw fa-github fa-lg\"></i></a>\r\n                <a className=\"btn btn-outline-dark btn-social mx-1\" \r\n                    href=\"https://www.linkedin.com/in/adam-keyser-693741107/\">\r\n                        <i className=\"fab fa-fw fa-linkedin-in fa-lg\"></i></a>\r\n            </div>\r\n            <span className=\"d-flex justify-content-center text-muted mx-auto\">\r\n                Copyright Â© Adam Keyser 2020\r\n            </span>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\n\r\nfunction QuizBody() {\r\n    // linked JSON quiz questions and answers\r\n    const questionsArray = require('../../assets/Apprentice_TandemFor400_Data.json');\r\n\r\n    const [gameOff, setGameOff] = useState(true);\r\n    const [tenQuestions, setTenQuestions] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [btnClass, setBtnClass] = useState(\"btn btn-primary btn-block m-1\");\r\n    const [showCorrect, setShowCorrect] = useState(false);\r\n    \r\n    function startQuiz() {\r\n        if (!gameOff) {\r\n            return;\r\n        }\r\n        setGameOff(false);\r\n        setScore(0);\r\n        const chosen = [];\r\n        // Choose 10 random questions from the 21\r\n        while (tenQuestions.length < 10) {\r\n            let num = Math.floor(Math.random() * (questionsArray.length));\r\n            if (chosen.includes(num)) {\r\n            } else {\r\n                chosen.push(num);\r\n                tenQuestions.push(questionsArray[num]);\r\n            }\r\n        }\r\n    };\r\n\r\n    function resetQuiz() {\r\n        setGameOff(true);\r\n        setCurrentQuestion(0);\r\n        setTenQuestions([]);\r\n    };\r\n\r\n    function handleAnswerChoice (isCorrect) {\r\n        // If the choice is correct, add 10 points and change color to green, else, change color to red\r\n        if (isCorrect === true) {\r\n            setScore(score + 10);\r\n            setBtnClass(\"btn btn-success btn-block m-1\");\r\n        } else {\r\n            setBtnClass(\"btn btn-danger btn-block m-1\");\r\n        }\r\n        setShowCorrect(true);\r\n        // After half a second, return the button color to normal and go to next question\r\n        setTimeout(function() {\r\n            const nextQuestion = currentQuestion + 1;\r\n            if (nextQuestion < tenQuestions.length) {\r\n                setCurrentQuestion(nextQuestion);\r\n                setShowCorrect(false);\r\n                setBtnClass(\"btn btn-primary btn-block m-1\");\r\n            } else {\r\n            resetQuiz();\r\n            setShowCorrect(false);\r\n            setBtnClass(\"btn btn-primary btn-block m-1\");\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div className=\"contrainer-fluid\" >\r\n            <div className='card border m-4' >\r\n                <div className='card-header text-center'>\r\n                    <div className='btn-group'>\r\n                        <button className='btn btn-light border' id='startBtn' onClick={startQuiz}>\r\n                            Start!\r\n                        </button>\r\n                        <div className=\"dropdown\">\r\n                            <button className=\"btn btn-light border dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                Options\r\n                            </button>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                                <button type='button' className='btn btn-link' data-toggle='modal' data-target='#rulesModal'>How To Play</button>\r\n                                <button type='button' className='btn btn-link' onClick={resetQuiz}>Reset Quiz</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Modal for rules */}\r\n                <div className=\"modal fade\" id=\"rulesModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"rulesModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"rulesModalLabel\">How to Play!</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <ol>\r\n                                <li>Press \"Start!\" to begin the quiz.</li>\r\n                                <li>Each quiz is 10 questions, chosen randomly from a list of 21, \r\n                                    and each question will only be shown once.\r\n                                </li>\r\n                                <li>Read the Trivia Question and choose one of the four answer choices.</li>\r\n                                <li>If your answer is correct, the buttons will flash green, if it is incorrect, \r\n                                    they will flash red.\r\n                                </li>\r\n                                <li>When all of the questions are done, you should see your score. You get 10 \r\n                                    points for each correct answer.\r\n                                </li>\r\n                                <li>If you ever need to reset the quiz, click \"Reset Quiz\" in the \"Options\" menu. </li>\r\n                            </ol>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* displays when the game isn't on */}\r\n                <div className='card-body text-center'>\r\n                    {gameOff ? (\r\n                        <>\r\n                        <h2>Press Start to begin the Trivia Quiz!</h2>\r\n                        <h4>Your last score was {score}.</h4>\r\n                        <h4>Can you do better?</h4>\r\n                        </>\r\n                    ) : ( \r\n                        <>\r\n                        {/* dynamically generate questions and answers */}\r\n                        <p key=\"question\" id='question' className=\"card-text text-center h5 border rounded p-2\">{tenQuestions[currentQuestion].question}</p>\r\n                        <div className='container pt-2'>\r\n                            {tenQuestions[currentQuestion].choices.map((choice) => (\r\n                                <button key={choice.id} className={btnClass} onClick={()=> handleAnswerChoice(choice.isCorrect)}>{choice.answer}</button>\r\n                            ))}\r\n                        </div>\r\n                        {showCorrect ? (\r\n                            <p className=\"h5 mt-3\">Answer: {tenQuestions[currentQuestion].correct}</p>\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                        \r\n                        </>\r\n                    )} \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizBody;","import './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport QuizBody from './components/QuizBody';\n\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <QuizBody></QuizBody>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}